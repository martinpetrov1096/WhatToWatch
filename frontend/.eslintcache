[{"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/app.tsx":"1","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/router.tsx":"2","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/index.tsx":"3","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/vote.tsx":"4","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/lobby.tsx":"5","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/overview.tsx":"6","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/home.tsx":"7","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/game.tsx":"8","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/details.tsx":"9","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/navbar.tsx":"10","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/card.tsx":"11","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/invalid.tsx":"12","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/lobby/genreSelector.tsx":"13","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/lobby/minRating.tsx":"14"},{"size":147,"mtime":1610170822287,"results":"15","hashOfConfig":"16"},{"size":716,"mtime":1610415986967,"results":"17","hashOfConfig":"16"},{"size":203,"mtime":1610153272451,"results":"18","hashOfConfig":"16"},{"size":621,"mtime":1610504060632,"results":"19","hashOfConfig":"16"},{"size":4971,"mtime":1610510120976,"results":"20","hashOfConfig":"16"},{"size":396,"mtime":1610498999261,"results":"21","hashOfConfig":"16"},{"size":2037,"mtime":1610513879377,"results":"22","hashOfConfig":"16"},{"size":7181,"mtime":1610514586677,"results":"23","hashOfConfig":"16"},{"size":680,"mtime":1610504060685,"results":"24","hashOfConfig":"16"},{"size":204,"mtime":1610236391257,"results":"25","hashOfConfig":"16"},{"size":884,"mtime":1610441686993,"results":"26","hashOfConfig":"16"},{"size":208,"mtime":1610239334427,"results":"27","hashOfConfig":"16"},{"size":805,"mtime":1610509890000,"results":"28","hashOfConfig":"16"},{"size":635,"mtime":1610510453738,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16103i4",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/app.tsx",[],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/router.tsx",[],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/index.tsx",[],["61","62"],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/vote.tsx",["63","64","65"],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/lobby.tsx",["66","67","68"],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/overview.tsx",["69"],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/home.tsx",["70"],"import { useEffect, useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { config } from '../config/config';\n\nexport const HomeRoute = function() {\n\n   const [joinCode, _setJoinCode] = useState<string>('');\n   const [validCode, setValidCode] = useState<boolean>(false)\n\n   /**\n    * These two functions are just used to\n    * wrap the setJoinCode so that we can\n    * check that it's the proper length\n    */\n   const setJoinCode = (code: string) => {\n      if (code.length <= 5) {\n         _setJoinCode(code);\n      }\n   }\n   const handleJoinCodeChange = (event: any) => {\n      setJoinCode(event.target.value);\n   }\n\n   /**\n    * newGame should use useRef vs useState\n    * since it isn't ever being updated to the \n    * dom\n    */\n   const newGame = useRef(() => {\n      axios.post('http://' + config.server.url + '/game')\n         .then((res) => {\n            if (res.status === 200) {\n               setJoinCode(res.data.id);\n            }\n         })\n         .catch((err)=> {\n            console.log(err);\n         });\n   });\n\n   /**\n    * Check if join code is valid each time it\n    * changes its value. \n    */\n   useEffect(() => {\n      if (joinCode.length == 5) {\n         axios.get('http://' + config.server.url + '/game', {\n            params: {\n               id: joinCode\n            }\n         }).then((res) => {\n            if (res.status === 200) {\n               setValidCode(true);\n            } else {\n               setValidCode(false);\n            }\n         }).catch(() => {\n            setValidCode(false);\n         });\n      }\n\n   }, [joinCode]);\n\n   return (\n      <div>\n         <h1>WhatToWatch</h1>\n         <h3>Valid Code: {validCode.toString()}</h3>\n         <button onClick={newGame.current}>New</button>\n\n         <input type=\"text\" value={joinCode} onChange={handleJoinCodeChange}/>\n         <h3>{joinCode}</h3>\n         <Link to={'/lobby/' + joinCode}>\n            <button disabled={!validCode}>Join</button>\n         </Link>\n      </div>\n   )\n}","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/game.tsx",["71","72","73","74","75"],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Switch,Route, useParams, Redirect, useHistory } from \"react-router-dom\";\nimport { io, Socket } from \"socket.io-client\";\nimport { GameNavbar } from '../components/game/navbar';\nimport { GameVote } from '../components/game/vote';\nimport { GameOverview } from '../components/game/overview';\nimport { CardDetails } from '../components/game/details';\nimport { InvalidGame } from \"./invalid\";\nimport { config } from \"../config/config\";\nimport { ISwipe } from \"../types/swipe\";\nimport { IGame } from \"../types/game\";\nimport axios from \"axios\";\n\n\ninterface GameParamTypes {\n   gameId: string;\n}\nlet socket: Socket;\nexport const GameRoute = () => {\n\n   /* Get the game ID, and if invalid, redirect */\n   const { gameId } = useParams<GameParamTypes>();\n   const [numPlayers, setNumPlayers] = useState<number>(0);\n   const [prevSwipes, setPrevSwipes] = useState<Array<ISwipe>>([]);\n   const [nextSwipes, setNextSwipes] = useState<Array<ISwipe>>([]);\n   const history = useHistory();\n   ///////////////////////////////////////////////////////////////////////////\n   /////////////////////////// USE EFFECT FUNCTIONS //////////////////////////\n   ///////////////////////////////////////////////////////////////////////////\n\n      /**\n    * Monitor lobbyId. If it is changed, \n    * verify that it is a proper lobbyId.\n    * If it isn't, redirect to the error\n    * page\n    */\n   useEffect(() => {\n      axios.get('http://' + config.server.url + '/game', {\n         params: {\n            id: gameId\n         }\n      }).then((res) => {\n         if (res.data.Status !== 'Game') {\n            history.push('/error');\n            socket.disconnect();\n         }\n      })\n      .catch(() => {\n         history.push('/error');\n         socket.disconnect();\n      })\n   }, [gameId]);\n\n   /**\n    * When the component gets mounted, \n    * initiate the socketio client and \n    * define all of the socket.on \n    * event functions\n    */\n   useEffect(() => {\n      /* Init socket io client */\n      socket = io(config.server.url + '/game', {\n         query: {\n            'gameId': gameId\n         }\n      });\n\n      socket.on('newSwipes', (swipes: Array<ISwipe>) => {\n         console.log(swipes.length);\n         setNextSwipes((oldNextSwipes) => {\n            return oldNextSwipes.concat(...swipes);\n         });\n      });\n\n      /**\n       * If there aren't any more swipes, \n       * just disconnect\n       */\n      socket.on('noNewSwipes', () => {\n         console.log('no new swipes left, disconnecting');\n         socket.disconnect();\n      });\n\n      socket.on('newConn', (numPlayers: number) => {\n         console.log('new player joined');\n         setNumPlayers(numPlayers);\n      });\n\n      socket.on('newDisconn', (numPlayers: number) => {\n         console.log('player left');\n         setNumPlayers(numPlayers);\n      });\n\n      socket.on('connection', (game: IGame) => {\n         console.log('connected');\n         setNumPlayers(game.numPlayers);\n         setNextSwipes(game.swipes);\n      });\n\n      socket.on('voted', ({swipeId, vote}: {swipeId: number, vote: 'yes' | 'no'}) => {\n         /**\n          * Need to setPrevSwipes and grab the \n          * current value from the callback. This way,\n          * we can actually get the recent value of\n          * prevSwipes\n          */\n         setPrevSwipes((curVal) => {\n            const inPrevSwipes = curVal?.findIndex((swipe) => swipe.id === swipeId);\n            if (inPrevSwipes !== -1) {\n               const newPrevSwipes = JSON.parse(JSON.stringify(curVal));\n               if (vote === 'yes') {\n                  ++newPrevSwipes[inPrevSwipes].numLikes;\n               } else if ( vote === 'no') {\n                  ++newPrevSwipes[inPrevSwipes].numDislikes;\n               }\n               return newPrevSwipes;\n            }\n            return curVal;\n         });\n         /**\n          * Need to setNextSwipes and grab the \n          * current value from the callback. This way,\n          * we can actually get the recent value of\n          * nextSwipes\n          */\n         setNextSwipes((curVal) => {\n            const inNextSwipes = curVal?.findIndex((swipe) => swipe.id === swipeId);\n            if (inNextSwipes !== -1) {\n               const newNextSwipes = JSON.parse(JSON.stringify(curVal));\n               console.log('inNext swipes');\n               if (vote === 'yes') {\n                  ++newNextSwipes[inNextSwipes].numLikes;\n               } else if ( vote === 'no') {\n                  ++newNextSwipes[inNextSwipes].numDislikes;\n               }\n              return newNextSwipes;\n            }\n            return curVal;\n         });\n      });\n      socket.on('error', (err: Error) => {\n         console.log(err);\n      });\n      \n      /**\n       * Return a function that disconnects from \n       * the socket so we can cleanup\n       */\n      return () => {\n         console.log('game cleanup');\n         socket.disconnect();\n      }\n   }, []);\n\n   /**\n    * Monitor @nextSwipes so we can make \n    * sure that we don't run out of cards\n    * If we do, request more swipes via\n    * the socket client. To prevent this\n    * from occurring before the server\n    * can send all of the existing swipes,\n    * we check that prevSwipes.length !== 0\n    */\n   useEffect(() => {\n      if (nextSwipes.length === 0 && prevSwipes.length !== 0) {\n         socket.emit('genNewSwipes');\n         console.log('getting more swipes');\n      }\n\n   }, [nextSwipes, prevSwipes]);\n\n   useEffect(() => {\n   }, [prevSwipes])\n\n\n   ///////////////////////////////////////////////////////////////////////////\n   ///////////////////////// ONCLICK HANDLER FUNCTIONS ///////////////////////\n   ///////////////////////////////////////////////////////////////////////////\n   /**\n    * A function that can be passed as a\n    * param to the vote card to vote \n    * yes or no\n    * @param vote the vote\n    */\n   const voteFunc = useCallback((vote: 'yes' | 'no') => {\n      if (nextSwipes[0] === undefined) {\n         return;\n      }\n      if (nextSwipes[0].id === undefined) {\n         return;\n      }\n      if (vote === 'yes') {\n         //++curVote.numLikes;\n         socket.emit('vote', { gameId: gameId, swipeId: nextSwipes[0].id, vote: 'yes' });\n      } else {\n        // ++curVote.numDislikes;\n         socket.emit('vote',  { gameId: gameId, swipeId: nextSwipes[0].id, vote: 'no'});\n      }\n      setPrevSwipes([\n         nextSwipes[0],\n         ...prevSwipes\n      ]);\n      setNextSwipes(nextSwipes.slice(1,));\n   }, [nextSwipes, prevSwipes, gameId]);\n\n   return (\n      <div>\n         <GameNavbar/>\n         <Switch>\n            <Route exact path=\"/game/:gameId/vote\">\n               <GameVote vote={voteFunc} curSwipe={nextSwipes[0]}/>\n            </Route>\n            <Route exact path=\"/game/:gameId/overview/\">\n               <GameOverview swipes={prevSwipes} />\n            </Route>\n            <Route exact path=\"/game/:gameId/details/:cardId\">\n               <CardDetails cards={nextSwipes}/>\n            </Route>\n            <Route path=\"/game\">\n               <InvalidGame/>\n            </Route>\n         </Switch>\n      </div>\n   );\n}","/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/details.tsx",[],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/navbar.tsx",[],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/game/card.tsx",["76","77"],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/routes/invalid.tsx",[],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/lobby/genreSelector.tsx",[],"/Users/martin/Documents/GitHub/what-to-watch/frontend/src/components/lobby/minRating.tsx",["78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":19},{"ruleId":"83","severity":1,"message":"87","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":14},{"ruleId":"83","severity":1,"message":"88","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":63,"column":7,"nodeType":"91","endLine":63,"endColumn":9,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":86,"column":7,"nodeType":"91","endLine":86,"endColumn":16,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":99,"column":7,"nodeType":"91","endLine":99,"endColumn":14,"suggestions":"96"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":47,"column":27,"nodeType":"99","messageId":"100","endLine":47,"endColumn":29},{"ruleId":"83","severity":1,"message":"101","line":1,"column":41,"nodeType":"85","messageId":"86","endLine":1,"endColumn":47},{"ruleId":"83","severity":1,"message":"102","line":2,"column":35,"nodeType":"85","messageId":"86","endLine":2,"endColumn":43},{"ruleId":"83","severity":1,"message":"103","line":23,"column":11,"nodeType":"85","messageId":"86","endLine":23,"endColumn":21},{"ruleId":"89","severity":1,"message":"93","line":52,"column":7,"nodeType":"91","endLine":52,"endColumn":15,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"105","line":153,"column":7,"nodeType":"91","endLine":153,"endColumn":9,"suggestions":"106"},{"ruleId":"83","severity":1,"message":"84","line":5,"column":10,"nodeType":"85","messageId":"86","endLine":5,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":17,"column":19,"nodeType":"99","messageId":"100","endLine":17,"endColumn":21},{"ruleId":"89","severity":1,"message":"107","line":12,"column":7,"nodeType":"91","endLine":12,"endColumn":9,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'config' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lobbyId'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has missing dependencies: 'history' and 'lobbyId'. Either include them or remove the dependency array.",["113"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'Redirect' is defined but never used.","'numPlayers' is assigned a value but never used.",["114"],"React Hook useEffect has a missing dependency: 'gameId'. Either include it or remove the dependency array.",["115"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [lobbyId]",{"range":"129","text":"130"},"Update the dependencies array to be: [history, lobbyId]",{"range":"131","text":"132"},"Update the dependencies array to be: [history, lobby, lobbyId]",{"range":"133","text":"134"},"Update the dependencies array to be: [gameId, history]",{"range":"135","text":"136"},"Update the dependencies array to be: [gameId]",{"range":"137","text":"138"},"Update the dependencies array to be: [props]",{"range":"139","text":"140"},[1807,1809],"[lobbyId]",[2354,2363],"[history, lobbyId]",[2659,2666],"[history, lobby, lobbyId]",[1834,1842],"[gameId, history]",[4999,5001],"[gameId]",[327,329],"[props]"]